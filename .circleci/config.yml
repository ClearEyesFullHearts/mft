version: 2.1 # CircleCI version
orbs:
  browser-tools: circleci/browser-tools@0.1.4
  node: circleci/node@5.1.0
jobs:
  build:
    machine:
      image: ubuntu-2004:current

    working_directory: ~/repo # Default working directory, where your project will be cloned

    steps:
      - checkout

      - browser-tools/install-firefox

      - browser-tools/install-chrome:
          replace-existing: true

      - node/install:
          node-version: "18.14.1"

      - run: cd ./docker/ci && KEY_AUTH_SIGN=${MFT_AUTH_KEY} docker-compose up -d

      - run: sleep 40
      
      - run: mkdir -p ~/cucumber

      - run: cd ./test-api && npm install
      - run: cd ./test-api && KEY_AUTH_SIGN=${MFT_AUTH_KEY} npm run ci-test-api
      - run: cd ./test-api && npm run ci-report-api

      - run: cd ./test-front && npm install
      - run: cd ./test-front && npm run ci-test-chrome
      - run: cd ./test-front && npm run ci-report-chrome
      - run: cd ./test-front && npm run ci-test-firefox
      - run: cd ./test-front && npm run ci-report-firefox
      - store_test_results:
          path: ~/cucumber
      - store_artifacts:
          path: ~/cucumber
      - persist_to_workspace:
          root: .
          paths:
            - test-front

  push:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install utils
          command: |
            apt-get update
            apt-get -y install jq
      - run:
          name: Generate full image name for new docker image
          command: |
            set -x
            FRONT_VERSION=$(cat front/package.json | jq -r '.version')
            FRONT_IMAGE_TAG=${FRONT_VERSION}.${CIRCLE_BUILD_NUM}
            SERVER_VERSION=$(cat rest/package.json | jq -r '.version')
            SERVER_IMAGE_TAG=${SERVER_VERSION}.${CIRCLE_BUILD_NUM}
            echo "gcr.io/$GOOGLE_PROJECT_ID/mft-invc-staging-front:$FRONT_IMAGE_TAG" > front_image_name
            echo "gcr.io/$GOOGLE_PROJECT_ID/mft-invc-staging-server:$SERVER_IMAGE_TAG" > server_image_name
      - run:
          name: Build image
          command: |
            FRONT_DOCKER_IMAGE_NAME=$(cat front_image_name)
            SERVER_DOCKER_IMAGE_NAME=$(cat server_image_name)
            docker build -t $FRONT_DOCKER_IMAGE_NAME --build-arg DOCKER_ENV=staging -f front/Dockerfile front/
            docker build -t $SERVER_DOCKER_IMAGE_NAME -f rest/Dockerfile rest/
      - run:
          name: Push image
          command: |
            if [ "${CIRCLE_BRANCH}" == "when-cloud-hosting-is-free" ]
            then
              FRONT_DOCKER_IMAGE_NAME=$(cat front_image_name)
              SERVER_DOCKER_IMAGE_NAME=$(cat server_image_name)
              echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
              gcloud auth activate-service-account --key-file gcloud-service-key.json
              gcloud --quiet auth configure-docker
              docker push $FRONT_DOCKER_IMAGE_NAME
              docker push $SERVER_DOCKER_IMAGE_NAME
            else
              echo "Not when-cloud-hosting-is-free branch; skipping image push.."
            fi
      - persist_to_workspace:
          root: .
          paths:
            - front_image_name
            - server_image_name

  staging:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Deploy
          command: |
            echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
            set -x
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            gcloud --quiet container clusters get-credentials $GOOGLE_CLUSTER_STAGING
            FRONT_DOCKER_IMAGE_NAME=$(cat workspace/front_image_name)
            SERVER_DOCKER_IMAGE_NAME=$(cat workspace/server_image_name)
            # Replace DOCKER_IMAGE_NAME placeholder in manifest with actual image name
            FRONT_KUBE_CONFIG=$(cat docker/staging/mft-invc-staging-client-deployment.yaml.template | sed "s|DOCKER_IMAGE_NAME|$FRONT_DOCKER_IMAGE_NAME|g")
            SERVER_KUBE_CONFIG=$(cat docker/staging/mft-invc-staging-server-deployment.yaml.template | sed "s|DOCKER_IMAGE_NAME|$SERVER_DOCKER_IMAGE_NAME|g")
            kubectl apply -f docker/staging/mft-invc-staging-database-deployment.yaml
            echo "$SERVER_KUBE_CONFIG" | kubectl apply -f -
            echo "$FRONT_KUBE_CONFIG" | kubectl apply -f -
            # Wait for deployment to finish
            kubectl rollout status deployment/mft-invc-staging-client
            kubectl get pods

  confirm:
    docker:
      - image: circleci/node:12.14.1-stretch-browsers
    steps:
      - attach_workspace:
          at: workspace
      - run: mkdir -p ~/cucumber
      - run: cd workspace/test-front && npm run staging-test-chrome
      - run: cd workspace/test-front && npm run staging-report-chrome
      - store_test_results:
          path: ~/cucumber
      - store_artifacts:
          path: ~/cucumber

workflows:
  version: 2
  build-push-deploy:
    jobs:
      - build
      - push:
          requires:
            - build
          filters:
            branches:
              only: when-cloud-hosting-is-free
      - staging:
          requires:
            - push
          filters:
            branches:
              only: when-cloud-hosting-is-free
      - confirm:
          requires:
            - staging
          filters:
            branches:
              only: when-cloud-hosting-is-free
