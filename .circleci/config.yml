version: 2.1 # CircleCI version
orbs:
  browser-tools: circleci/browser-tools@0.1.4
  node: circleci/node@1.1.6
jobs:
  build:
    machine:
      image: ubuntu-1604:201903-01

    working_directory: ~/repo # Default working directory, where your project will be cloned

    steps:
      - checkout

      - browser-tools/install-firefox

      - browser-tools/install-chrome:
          replace-existing: true

      - node/install-node:
          version: "12.14.0"

      - run: cd ./docker/ci && KEY_AUTH_SIGN=${MFT_AUTH_KEY} docker-compose up -d
      
      - run: mkdir -p ~/cucumber

      - run: cd ./test-api && npm install
      - run: cd ./test-api && KEY_AUTH_SIGN=${MFT_AUTH_KEY} npm run ci-test-api

      - run: cd ./test-front && npm install
      - run: cd ./test-front && KEY_AUTH_SIGN=${MFT_AUTH_KEY} npm run ci-test-chrome
      - run: cd ./test-front && KEY_AUTH_SIGN=${MFT_AUTH_KEY} npm run ci-test-firefox
      - store_test_results:
          path: ~/cucumber
      - store_artifacts:
          path: ~/cucumber

  push:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Generate full image name for new docker image
          command: |
            set -x
            DOCKER_IMAGE_TAG=v${CIRCLE_BUILD_NUM}
            echo "gcr.io/$GOOGLE_PROJECT_ID/mft-invc-staging-front:$DOCKER_IMAGE_TAG" > front_image_name
            echo "gcr.io/$GOOGLE_PROJECT_ID/mft-invc-staging-server:$DOCKER_IMAGE_TAG" > server_image_name
      - run:
          name: Build image
          command: |
            FRONT_DOCKER_IMAGE_NAME=$(cat front_image_name)
            SERVER_DOCKER_IMAGE_NAME=$(cat server_image_name)
            docker build -t $FRONT_DOCKER_IMAGE_NAME --build-arg DOCKER_ENV=staging -f front/Dockerfile front/
            docker build -t $SERVER_DOCKER_IMAGE_NAME -f rest/Dockerfile rest/
      - run:
          name: Push image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              FRONT_DOCKER_IMAGE_NAME=$(cat front_image_name)
              SERVER_DOCKER_IMAGE_NAME=$(cat server_image_name)
              echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > gcloud-service-key.json
              gcloud auth activate-service-account --key-file gcloud-service-key.json
              gcloud --quiet auth configure-docker
              docker push $FRONT_DOCKER_IMAGE_NAME
              docker push $SERVER_DOCKER_IMAGE_NAME
            else
              echo "Not master branch; skipping image push.."
            fi

workflows:
  version: 2
  build-push-deploy:
    jobs:
      - build
      - push:
          requires:
            - build
          filters:
            branches:
              only: master